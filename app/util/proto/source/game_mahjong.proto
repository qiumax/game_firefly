// m_5201_toc: 发牌后，玩家还会收到色子点数，摇色子的玩家
// m_5202_toc: 玩家拿到这张牌后, 需要执行m_5203_tos出牌或者执行m_5205_tos进行operator操作
// m_5203_toc: 表示出牌结束,玩家出的牌会通过 m_5204_toc广播给房间所有玩家
// m_5204_toc: 收到玩家的出牌a,并且强制更新自己手上的所有牌,防止网络异常造成牌不正确.
//             同时,对于牌a,玩家可能有各种响应operate. 但是不一定能够操作, operator_able为true的玩家才可以操作, 如果是false,则
//             只是显示这些操作却不能操作.
//             比如A出牌, B吃, C碰, D胡. 则真正可以进行操作的只有D
// m_5205_tos: 玩家的操作, 收到m_5204_toc的操作指令后可执行这条指令. 另外, 收到m_5202_toc的玩家也可以暗杠, 自摸.
//             服务器会通过m_5205_toc将操作广播到整个房间. 进行操作的玩家还会收到m_5202_toc或者需要发送m_5203_tos
//             比如B碰了A的牌, B需要执行m_5205_tos将碰的牌传到服务器外,还要执行m_5203_tos打出一张牌
//             比如B明杠了A的牌,B需要执行m_5205_tos将碰的牌传到服务器外, 还会收到m_5202_toc补一张牌,然后执行m_5203_tos打出一张牌
// m_5206_toc: 通知玩家进行操作, 比如 比如A出牌, B吃, C碰, D胡. D选择不操作, 放弃胡牌, 则B, C会收到m_5206_toc
// m_5207_toc: 比如打完10局,进行结算. 单局结算见play.proto m_4004_toc

// 色子点数
message m_5201_toc {
    required uint32 maker_account_id = 1;           // 庄家帐号ID 和 m_4003_toc中的相同
    repeated uint32 craps = 2;                      // 多枚色子点数
    optional uint32 mahjong_start_num = 3;          // 拿牌第几张
    optional uint32 mahjong_end_num = 4;            // 补牌第几章
}

// 拿牌
message m_5202_toc {
    required uint32 card = 1;       // 单张牌
    repeated uint32 operator = 2;   //
}


// 玩家出牌
message m_5203_tos {
    required uint32 card = 1;   // 单张牌
}

message m_5203_toc {

}

// 广播给所有人玩家出的牌
message m_5204_toc {
    required uint32 execute_account_id = 1;     // 出牌人
    required uint32 card = 2;                   // 单张牌
    repeated uint32 card_list = 3;              // (防止网络异常)强制更新接收者牌(每个玩家收自己的牌)
    required bool operator_able = 4;            // 如果为true才可以操作operator, 否则只是显示而已,等待优先级更高的人操作
    repeated uint32 operator = 5;               // 接收者收到牌后的操作
}

// 玩家操作
message m_5205_tos {
    required uint32 operator = 1;               //
    repeated uint32 cards = 2;                  // 操作的牌
}

message m_5205_toc {
    required uint32 execute_account_id = 1;     // 操作的玩家
    required uint32 operator = 2;               //
    repeated uint32 cards = 3;                  // 操作的牌
}

// 通知玩家进行操作
message m_5206_toc {
    required bool operator_able = 1;            // 如果为true才可以操作operator, 否则只是显示而已,等待优先级更高的人操作
    repeated uint32 operator = 2;               //
}

// 房间达到游戏次数上限，房间失效
//message m_5207_toc {
//    repeated p_room_full room_fulls = 1;
//    optional uint32 server_t = 2;               // 服务器当前实践
//    optional uint32 max_rounds = 3;             // 房间最大回合数
//    optional uint32 give_up = 4;                // 0 否, 1 是
//}
//
//message p_room_full {
//    required uint32 account_id = 1;             // 玩家帐号ID
//    required uint32 rank = 2;                   // 排名(根据积分变化)
//    required int32  point_change = 3;           // 积分变化
//    required uint32 max_point = 4;              // 单场最高分
//    required uint32 drawn_count = 5;            // 自摸场数
//    required uint32 win_count = 6;              // 赢的场数
//    required uint32 lose_count = 7;             // 失败的场数
//    required uint32 help_count = 8;             // 放炮的场数
//}

// 广播拿牌的玩家
message m_5208_toc {
    required uint32 account_id = 1;
}


// 玩家积分变化
message m_5209_toc {
    repeated p_point_change point_changes = 1;
}

message p_point_change {
    required uint32 account_id = 1;             // 玩家帐号ID
    required int32 point_change = 2;            // 积分变化
    required int32 current_point = 3;           // 当前积分
    optional uint32 change_origin = 4;          // 积分变化原因(客户端不知道是否用的上)
}


// 客户端上传麻将骰子点数
message m_5210_tos {
    repeated uint32 craps = 1;
}

message m_5210_toc {

}



